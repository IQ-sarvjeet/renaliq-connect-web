/**
 * Somatus Patient Portal API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.7.0-23-03-09-18-54
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ProviderTokenResponse } from '../model/providerTokenResponse';
import { SendMessage } from '../model/sendMessage';
import { ThreadDetailsResponse } from '../model/threadDetailsResponse';
import { ThreadSummary } from '../model/threadSummary';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MessagingService {

    protected basePath = 'https://web-patient-dev-api.azurewebsites.net/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param threadKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public messagingGetThread(threadKey: string, observe?: 'body', reportProgress?: boolean): Observable<ThreadDetailsResponse>;
    public messagingGetThread(threadKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ThreadDetailsResponse>>;
    public messagingGetThread(threadKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ThreadDetailsResponse>>;
    public messagingGetThread(threadKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadKey === null || threadKey === undefined) {
            throw new Error('Required parameter threadKey was null or undefined when calling messagingGetThread.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ThreadDetailsResponse>('get',`${this.basePath}/api/Messaging/threads/${encodeURIComponent(String(threadKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public messagingGetThreads(observe?: 'body', reportProgress?: boolean): Observable<Array<ThreadSummary>>;
    public messagingGetThreads(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ThreadSummary>>>;
    public messagingGetThreads(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ThreadSummary>>>;
    public messagingGetThreads(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ThreadSummary>>('get',`${this.basePath}/api/Messaging/threads`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public messagingGetToken(observe?: 'body', reportProgress?: boolean): Observable<ProviderTokenResponse>;
    public messagingGetToken(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProviderTokenResponse>>;
    public messagingGetToken(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProviderTokenResponse>>;
    public messagingGetToken(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ProviderTokenResponse>('get',`${this.basePath}/api/Messaging/token`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param threadKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public messagingMarkThreadRead(threadKey: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public messagingMarkThreadRead(threadKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public messagingMarkThreadRead(threadKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public messagingMarkThreadRead(threadKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (threadKey === null || threadKey === undefined) {
            throw new Error('Required parameter threadKey was null or undefined when calling messagingMarkThreadRead.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('put',`${this.basePath}/api/Messaging/threads/${encodeURIComponent(String(threadKey))}/read`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param threadKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public messagingSendMessage(body: SendMessage, threadKey: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public messagingSendMessage(body: SendMessage, threadKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public messagingSendMessage(body: SendMessage, threadKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public messagingSendMessage(body: SendMessage, threadKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling messagingSendMessage.');
        }

        if (threadKey === null || threadKey === undefined) {
            throw new Error('Required parameter threadKey was null or undefined when calling messagingSendMessage.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Blob>('post',`${this.basePath}/api/Messaging/threads/${encodeURIComponent(String(threadKey))}/messages`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
