/**
 * Somatus Patient Portal API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.7.0-23-03-09-18-54
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PagedResultsOfSavedItemInfo } from '../model/pagedResultsOfSavedItemInfo';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SavedItemsService {

    protected basePath = 'https://web-patient-dev-api.azurewebsites.net/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param sort 
     * @param page 
     * @param maxResults 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public savedItemsGetItems(sort?: string, page?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<PagedResultsOfSavedItemInfo>;
    public savedItemsGetItems(sort?: string, page?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResultsOfSavedItemInfo>>;
    public savedItemsGetItems(sort?: string, page?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResultsOfSavedItemInfo>>;
    public savedItemsGetItems(sort?: string, page?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PagedResultsOfSavedItemInfo>('get',`${this.basePath}/api/SavedItems`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param refType 
     * @param refId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public savedItemsRemoveItem(refType: string, refId: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public savedItemsRemoveItem(refType: string, refId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public savedItemsRemoveItem(refType: string, refId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public savedItemsRemoveItem(refType: string, refId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (refType === null || refType === undefined) {
            throw new Error('Required parameter refType was null or undefined when calling savedItemsRemoveItem.');
        }

        if (refId === null || refId === undefined) {
            throw new Error('Required parameter refId was null or undefined when calling savedItemsRemoveItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('delete',`${this.basePath}/api/SavedItems/${encodeURIComponent(String(refType))}/${encodeURIComponent(String(refId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param refType 
     * @param refId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public savedItemsSaveItem(refType: string, refId: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public savedItemsSaveItem(refType: string, refId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public savedItemsSaveItem(refType: string, refId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public savedItemsSaveItem(refType: string, refId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (refType === null || refType === undefined) {
            throw new Error('Required parameter refType was null or undefined when calling savedItemsSaveItem.');
        }

        if (refId === null || refId === undefined) {
            throw new Error('Required parameter refId was null or undefined when calling savedItemsSaveItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('put',`${this.basePath}/api/SavedItems/${encodeURIComponent(String(refType))}/${encodeURIComponent(String(refId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
