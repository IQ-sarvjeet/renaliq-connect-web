# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - testing_5sept

stages:
  - stage: 'Build'
    displayName: 'Buildd the web appication'
    jobs:
      - job: 'Build'
        displayName: 'Build job'
        pool:
          vmImage: 'windows-latest'
          demands:
          - npm
        
        steps:
        - task: NodeTool@0
          displayName: 'Use Node 16.x'
          inputs:
            versionSpec: 16.x 
          
        - task: Npm@1
          displayName: 'npm custom'
          inputs:
            command: custom
            verbose: false
            customCommand: 'install -g @angular/cli'
        
        - task: Npm@1
          displayName: 'npm install'
          inputs:
            verbose: false
          
        - script: 'ng build '
          displayName: build
        
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Pipeline Artifact'
          inputs:
            targetPath: 'dist/new-angular-app'
            artifact: drop

  - stage: 'Dev'
    displayName: 'Deploy to the dev environment'
    dependsOn: Build
    condition:  succeeded()
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'windows-latest'
      environment: dev
      variables:
      - group: uat
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop

            - task: PowerShell@2
              inputs:
                targetType: 'inline'
                script: 'mkdir dist'

            - task: CopyFiles@2
              displayName: 'Copy Files to: $(System.DefaultWorkingDirectory)/dist'
              inputs:
                SourceFolder: '$(Agent.BuildDirectory)\drop'
                TargetFolder: '$(System.DefaultWorkingDirectory)/dist'

            - task: replacetokens@5
              inputs:
                rootDirectory: '$(System.DefaultWorkingDirectory)/dist'
                targetFiles: 'main.*.js'
                tokenPattern: 'custom'
                tokenPrefix: '_@_'
                tokenSuffix: '_@_'
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'Azure Developer (7e07cf2b-f33e-470a-82ad-395d1d3bf702)'
                appType: 'webApp'
                WebAppName: 'web-patient-dev-api'
                deployToSlotOrASE: true
                ResourceGroupName: 'rsg-patientportal-dev-01'
                SlotName: 'env-test'
                packageForLinux: '$(System.DefaultWorkingDirectory)/dist'
    
    - job: Notification
      displayName: Information
      condition: succeeded()
      dependsOn: Deploy



  - stage: 'prod'
    displayName: 'Deploy to the prod environment'
    dependsOn: Dev
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'windows-latest'
      environment: prod
      variables:
      - group: prod
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop

            - task: PowerShell@2
              inputs:
                targetType: 'inline'
                script: 'mkdir dist'

            - task: CopyFiles@2
              displayName: 'Copy Files to: $(System.DefaultWorkingDirectory)/dist'
              inputs:
                SourceFolder: '$(Agent.BuildDirectory)\drop'
                TargetFolder: '$(System.DefaultWorkingDirectory)/dist'

            - task: replacetokens@5
              inputs:
                rootDirectory: '$(System.DefaultWorkingDirectory)/dist'
                targetFiles: 'main.*.js'
                tokenPattern: 'custom'
                tokenPrefix: '_@_'
                tokenSuffix: '_@_'
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'Azure Developer (7e07cf2b-f33e-470a-82ad-395d1d3bf702)'
                appType: 'webApp'
                WebAppName: 'web-patient-dev-api'
                deployToSlotOrASE: true
                ResourceGroupName: 'rsg-patientportal-dev-01'
                SlotName: 'env-test'
                packageForLinux: '$(System.DefaultWorkingDirectory)/dist'       
